pipeline {
    agent any
    environment {
        NVM_DIR = "${HOME}/.nvm"
        SERVER_PATH = "SERVER_PATH_VAR"
        BUILDFOLDER = "BUILD_PATH_VAR"
        WORKDIR = "WORKDIR_VAR"
        DEPLOY_PATH = "DEPLOY_PATH_VAR"
        PEMFILE = "PEMFILE_VAR"
        SERVERIP = "SERVER_IP_VAR"
        USERNAME = "USERNAME_VAR"
        NODE_VERSION = "NODE_VERSION_VAR"
    }
    triggers {
         pollSCM('* * * * *') // Polling every minute for demonstration purposes; adjust as needed
    }
    stages {
        stage('clone') {
            when {
                expression { return !env.RERUN_STAGE || env.RERUN_STAGE == 'clone' || env.PREV_STAGE == 'clone' }
            }
            steps {
                script {
                    // Clone the repository into the Jenkins workspace
                    checkout([
                        $class: 'GitSCM', 
                        branches: [[name: '*/BRANCH_VAR']], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '.']], 
                        submoduleCfg: [], 
                        userRemoteConfigs: [[
                            credentialsId: 'Deep-Github', 
                            url: 'REPO_VAR'
                        ]]
                    ])
                    env.PREV_STAGE = 'clone'
                }
            }
        }
        stage('build') {
            when {
                expression { return !env.RERUN_STAGE || env.RERUN_STAGE == 'build' || env.PREV_STAGE == 'clone' || env.PREV_STAGE == 'build' }
            }
            steps {
                script {
                    // Execute the script using bash
                    sh '''
                        #!/bin/bash
                        set -e

                        # Navigate to project directory
                        cd $WORKDIR
                        
                        # Load necessary environments
                        . ~/.nvm/nvm.sh > /dev/null 2>&1
                        . ~/.bashrc > /dev/null 2>&1
                        . ~/.profile
                        
                        # Use Node version 14
                        nvm install $NODE_VERSION > /dev/null 2>&1
                        nvm install $NODE_VERSION > /dev/null 2>&1
                        
                        # List files
                        ls -laSh
                        
                        # Uncomment if needed
		                rm -rf node_modules/
                        #export NODE_TLS_REJECT_UNAUTHORIZED=0
                        
                        # Install NPM packages
                        meteor npm install
                        
                        # Build the project
		                echo "------------------ $(pwd) -----------------"
                        meteor --server-only build --directory $BUILDFOLDER
                        
                        # Prepare bundle
                        cd $BUILDFOLDER
                        ls -la
                        tar -czvf bundle.tar.gz bundle/
                    '''
                    env.PREV_STAGE = 'build'

                }
            }
        }
        stage('servercopy') {
            when {
                expression { return !env.RERUN_STAGE || env.RERUN_STAGE == 'servercopy' || env.PREV_STAGE == 'clone' || env.PREV_STAGE == 'build' || env.PREV_STAGE == 'servercopy' }
            }
            steps {
                script {
                    // Execute the script using bash
                    sh '''
                        #!/bin/bash
                        set -e
                        
                        # Transfer bundle to server
                        scp -r -i ~/workspace/$PEMFILE $BUILDFOLDER/bundle.tar.gz $USERNAME@$SERVERIP:$SERVER_PATH
                        
                        # Check if SCP was successful
                        if [ $? -eq 0 ]; then
                            echo "Build Copied to server âœ…"
                        else
                            echo "Build Copy Failed !!" && exit 1
                        fi
                        
                        # Cleanup
                        cd $BUILDFOLDER
                        ls -laSh
                        rm -rf .bundle*
                    '''
                    env.PREV_STAGE = 'servercopy'

                }
            }
        }
        stage('deploy') {
            when {
                expression { return !env.RERUN_STAGE || env.RERUN_STAGE == 'deploy' || env.PREV_STAGE == 'clone' || env.PREV_STAGE == 'build' || env.PREV_STAGE == 'servercopy' || env.PREV_STAGE == 'sonarqube' || env.PREV_STAGE == 'deploy' }
            }
            steps {
                script {
                    // Execute the script using bash
                    sh '''
                        #!/bin/bash
                        set -e
                        
                        cd $WORKDIR
                        ssh -i ~/workspace/$PEMFILE $USERNAME@$SERVERIP "bash $DEPLOY_PATH/deploy.sh"
                    '''
                    env.PREV_STAGE = 'deploy'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline finished.'
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
    }
}
